/*
 * Copyright (c) 2015, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk> 

package std.stdio;
import std.header.Parameter.*;
import std.header.Source.*;

actor YtoStream() uint(size=8) Y ==> uint(size=8) Yout, bool pEOF: 
	
	uint(size=8)  pictureBufferYUV[IM_WIDTH * IM_HEIGHT];
	int (size=16) pictureWidthLuma;
	int (size=16) pictureHeightLuma;
		
	getPictureSize: action ==> 
	do
		pictureWidthLuma := IM_WIDTH;
		pictureHeightLuma := IM_HEIGHT;
	end
	
	int count := 0;
	
	
	getPixValueY: action Y:[Bytes] ==>	
	do
		pictureBufferYUV[count] := Bytes;			
		count := count + 1;				
	end
					
    
	doneCount: action ==> 
	guard count = pictureWidthLuma * pictureHeightLuma
	do
		count := 0;
	end		
	
	int count_frame := 0;
	doneCountYUV: action ==>  
	guard count = pictureWidthLuma * pictureHeightLuma
	do	    
		count := 0;
		
		count_frame := count_frame + 1;
	//	println("Frame number : " + count_frame);
		
	//	if(count_frame >= 2) then
	//		source_exit(0);
	//	end
		
	end
	
	send: action ==> Yout:[stream], pEOF:[false]
	var uint(size=8) stream
	do	    
		stream  := pictureBufferYUV[count];				
		count := count + 1;					
		//println(count);	
	end
	
	sendEOF: action ==> Yout:[stream], pEOF:[true]
	var uint(size=8) stream	
	do
		stream := 0x0A;
	end
	
	schedule fsm s10 :
		s10 (getPictureSize) --> s0;
		s0 ( getPixValueY ) --> s0;
		s0 ( doneCount ) --> s1;	
		s1 ( send )-->s1;
		s1 ( doneCountYUV)-->s2;
		s2 ( sendEOF) --> s2;
	end
	
	priority
		doneCount > getPixValueY;
		doneCountYUV > send;
	end	
	
end