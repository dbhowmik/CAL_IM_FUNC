/********************************************************************************
  Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk>
  * Date: 28.11.2014
*****************************************************************************/
package std.util;
unit Math :

/******************************************************************************
* Integer division function  
*****************************************************************************/
function intDiv(int num, int den) --> int 
	var int sign1 = if(num<0) then 1 else 0 end,
	    int sign2 = if(den<0) then 1 else 0 end 
	:
		if(sign1*sign2 < 0) then
			divide(abs(num), abs(den))*(-1) // Handle sign bit
		else
			divide(abs(num), abs(den))
		end
	end
	
/******************************************************************************
* Unsigned division function  
*****************************************************************************/
function divide(int(size=32) num, int(size=32) den) --> int(size=32) :	
			if(num >= den) then 
			  1+divide(num-den,den) 
			else 
			  0
			end
    end 

/******************************************************************************
* Abs function for floats 
*****************************************************************************/
	function absFloat(float x)
				-->
			float
		:
			if(x > 0.0)then
				x
			else
				-x
			end
		end


/******************************************************************************
* Abs function
* NOTE: This function was provided by ORCC-CAL application: System
*****************************************************************************/
	function abs(int(size=32) x)
				-->
			int(size=32)
		:
			if(x > 0)then
				x
			else
				-x
			end
		end
		
/******************************************************************************
* log2 function 
* NOTE: This function was provided by ORCC-CAL application: System
*****************************************************************************/
    uint(size=8) log2_tab[256] = [
        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];
    function log2(int v)
                -->
            int
     var
        int v1 = if (v  & 0xffff0000) != 0 then v>>16 else v  end,
        int n1 = if (v  & 0xffff0000) != 0 then 16    else 0  end,
        int v2 = if (v1 & 0x0000ff00) != 0 then v1>>8 else v1 end,
        int n2 = if (v1 & 0x0000ff00) != 0 then n1+8  else n1 end
        :
            n2 + log2_tab[v2]
     end

/***************************************************************************
 * Unsigned floor function
 ***************************************************************************/
function floorU(float num) --> uint (size=8) :
	floor_round_subRoutine(num,-1) 	
end		
	
function floor_round_subRoutine(float num, int i) --> int : 	
	if(num >= 0.0) then
		floor_round_subRoutine(num-1, i+1)
	else
		clip_i32_u8(i)
	end		
end
	  
/***************************************************************************
 * Unsigned round function
 ***************************************************************************/
function roundU(float num) --> uint (size=8): 
	floor_round_subRoutine(num+0.5,-1) 		
end		
	
	    
/******************************************************************************
* Clip_i32_u8 function (clip i32 value between 0 and 255)
* NOTE: This function was provided by ORCC-CAL application: System
*****************************************************************************/
	function clip_i32_u8(int(size=32) Value)
				-->
			int(size=32)
		:
			if (Value & (~0xFF)) != 0 then 
			  (-Value) >> 31
            else 
              Value 
            end
		end
		
/******************************************************************************
* Maximum function 
* NOTE: This function was provided by ORCC-CAL application: System 
*****************************************************************************/
	function max(int a,int b)
				-->
			int
		:
			if(a > b)then
				a
			else
				b
			end
		end
/******************************************************************************
* Minimum function
* NOTE: This function was provided by ORCC-CAL application: System
*****************************************************************************/
	function min(int a,int b)
				-->
			int
		:
			if(a < b)then
				a
			else
				b
			end
		end

end