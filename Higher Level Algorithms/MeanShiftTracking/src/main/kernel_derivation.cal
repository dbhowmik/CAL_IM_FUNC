/*  
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 *  
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk> 
 				 

package main;

import std.header.Parameter.*;
import std.util.Math.*;

actor kernel_derivation() ==> bool kDervO:
	
	bool kArray[X_SIZE][Y_SIZE];
	int xCount := 0;
	int yCount := 0;
	
	/*
	 * Kernel derivation actor
	 */
	kernelDerivation: action ==> 
	var 
		int euclideanDistance,
		int tmpX,
   	 	int tmpY,
   	 	int tmp 	
	do
		foreach int x in -HALF_X .. HALF_X do
			foreach int y in -HALF_Y .. HALF_Y do
				Div(abs(x)*100, HALF_X);
				tmpX := Div_result;
				
				Div(abs(y)*100, HALF_Y);
				tmpY := Div_result;
				
				//tmpX := (abs(x)*100)/HALF_X;
     			//tmpY := (abs(y)*100)/HALF_Y;
     			
     			tmp  := tmpX*tmpX + tmpY*tmpY;    
   	 			sqrt_cal(tmp);    	 			   	 		
   	 			euclideanDistance := sqrtValue;
   	 			
				if(euclideanDistance > 100) then
					kArray[x+HALF_X][y+HALF_Y] := false;
				else
					kArray[x+HALF_X][y+HALF_Y] := true;
				end																												
			end
		end 
	end 
	
	/*
	 * Send data to next actor 
	 */
	sendData: action ==> kDervO:[ Out ]
	var
		bool Out
	do
		Out := kArray[xCount][yCount];
					
		if(kArray[xCount][yCount] = true) then
			print("true, ");
		else		
			print("false, ");
		end	
										
		yCount := yCount+1;		
		
		if(yCount = Y_SIZE) then
			println("----");
			xCount := xCount + 1;
			yCount := 0;
		end 		
	end
	
	
	doneCount: action ==> 
	guard xCount = X_SIZE
	do
		println("+++");
		xCount := 0;
		yCount := 0;				
	end	
	
  /* ********************************************************
   * Algorithm uses 'Bakhshali approximation' for square root calculation
   * ********************************************************/
     
	  procedure sqrt_cal(int num)	  
	  var
	  //	int pSq := 0, //This will be the nearest perfect square to s
	    int N := 0, //This is the sqrt of pSq
	    int i := num,
	    int j := 0          
	  begin
	  	while(j*j<=i) do
			N := j;
			j := j+1;     		
     	end
		 
	     sqrtValue := N;      
	  end
	  int sqrtValue;
	
	procedure Div(int num, int den)
    var int quotient := 0,
        int sign_num := 1,
        int sign_den := 1
    begin
   		if(num<0)then sign_num := -1; end
    	if(den<0)then sign_den := -1; end
   
    	num := abs(num);
    	den := abs(den);
    if(den != 0) then
    	while (num >= den) 
    	do
        	num  := num - den; // (if numerator is not equal or less than the divisor)
        	quotient := quotient + 1;
    	end
    else
   		quotient := num;
   	end	
    
    if((sign_num + sign_den)=0) then
    	Div_result := -quotient;
    else
    	Div_result := quotient;
    end
  
   end 
   int Div_result;
//	  block: action ==>
//  		guard false 
//  	  end
  	   
	  schedule fsm s0 :
			s0 (kernelDerivation  ) --> s1;	
			s1 (sendData   ) --> s1;
			s1 (doneCount) -->s0;
			//s2 (block) --> s2;		
  	  end
  
	  priority
  		doneCount > sendData;
  	  end
end