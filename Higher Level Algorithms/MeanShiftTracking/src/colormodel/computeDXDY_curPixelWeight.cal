/*
 * Copyright (c) 2014, Project: Rathlin, Heriot-Watt University, Edinburgh, UK
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the Heriot-Watt University nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
  
// Author: Deepayan Bhowmik <d.bhowmik@hw.ac.uk> 
 				 

package colormodel;
import std.header.Parameter.*;

actor computeDXDY_curPixelWeight() int weights ==> int curPixelWeight, bool reset, int X, int Y:
    int count_x := 0;
    int count_y := 0;
    
	action weights:[weight_val] ==> curPixelWeight:[curWeight_val], reset:[reset_val], X:[x], Y:[y]
	var int curWeight_val, bool reset_val, uint x, uint y
	do
		if(K_DER[count_x][count_y]) then
    				curWeight_val := weight_val;
    	else
    				curWeight_val := 0;
    	end
    			
		
		x := count_x;
		y := count_y;
		
		/* Termination condition */
		count_y := count_y + 1;		
		if(count_y = Y_SIZE) then
			count_x := count_x + 1;			
			count_y := 0;
		end
				
		if(count_x = X_SIZE) then
			count_x := 0;
			count_y := 0;		
			reset_val := true;
		else
			reset_val := false;
		end
		
	end
end