package main.vamodel;

import std.header.Parameter.*;
import std.util.Math.*;

actor resize_norm_L2() int coefficient ==> int filt_coeff:
	int width = SUB2_WIDTH;
	int height = SUB2_HEIGHT;
//	int scale := SCALE_PARAM_2;
	
	int coeffBuffer[height][width];	
	int countX := 0;
	int countY := 0;	
	
	getCoeffValue: action coefficient:[value] ==>  	
	do			
		coeffBuffer[countX][countY] := value;
				
		countY := countY + 1;
		
		if(countY = width) then
			countX := countX + 1;
			countY := 0; 
		end									
	end
	
	doneCountX: action ==>
	guard countX = height
	do
		countX := 0;					
	end

	// Image resize using nearest bi-linear interpolation. 
	// Comparison will be accuracy vs FPGA speed/resource etc.
	    
	int tmp[IM_HEIGHT][IM_WIDTH];  
	int max_val := 0;
	int x_ratio; int y_ratio; int px; int py;
	
	int p1; int p2; int p3; int p4;
	int x1; int x2; int y1; int y2;
	int fx; int fy; 
	
	imageResize: action ==>
	do						
		x_ratio := IM_HEIGHT/height;
		y_ratio := IM_WIDTH/width;
		max_val := 0;		
				
		foreach int i in 0 .. (IM_HEIGHT-1) do
			foreach int j in 0 .. (IM_WIDTH-1) do				
				px := i/x_ratio;
				py := j/y_ratio;				
				
				p1 := coeffBuffer[px][py];
				p2 := coeffBuffer[px][py+1];
				p3 := coeffBuffer[px+1][py];
				p4 := coeffBuffer[px+1][py+1];
				
				y1 := py*y_ratio;
				y2 := (py+1)*y_ratio;
				x1 := px*x_ratio;
				x2 := (px+1)*x_ratio;
				
					
				fy := (y2-j)*p1 + (j-y1)*p2;
				fx := (y2-j)*p3 + (j-y1)*p4;
				
				tmp[i][j] := ((x2-i)*fy + (i-x1)*fx)/((y2-y1)*(x2-x1));

				if(tmp[i][j]>max_val) then max_val := tmp[i][j]; end // Find maximum value for normalisation
			end 
		end
	end
	
	sendResizedValue: action ==> filt_coeff:[coeff_Val]
	var int coeff_Val
	do  
		coeff_Val := (tmp[countX][countY]* 100)/max_val;
		countY := countY + 1;		
		if(countY = IM_WIDTH) then
			countX := countX + 1;
			countY := 0; 
		end
	end
	
	doneResizeCountX: action ==>
	guard countX = IM_HEIGHT
	do
		countX := 0;		
	end
		
	schedule fsm s0 :			
		s0 (getCoeffValue ) --> s0;
		s0 (doneCountX ) --> s1;
		s1 (imageResize) --> s2;
		s2 (sendResizedValue) --> s2;
		s2 (doneResizeCountX) --> s0;		
	end
	
	priority
		doneCountX > getCoeffValue;
		doneResizeCountX > sendResizedValue;		
	end

end