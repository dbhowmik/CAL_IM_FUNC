package main.vamodel;

import std.header.Parameter.*;

actor lift53_row1() uint(size=8) imageStream ==> int coeff:
     
	int width = IM_WIDTH;

	int Buffer[width];	
	int countX := 0;
	bool predict;	
	
	getCoeffValue: action imageStream:[value] ==>  	
	do			
		Buffer[countX] := value;				
		countX := countX + 1;																
	end
	
	/* Wavelet Row Filtering */
	wavelet_filter: action imageStream:[value] ==> coeff:[out_val]
	var int out_val	
	do		
		Buffer[countX] := value;						
		if(countX=1) then // Symmetric extension
		    out_val := Buffer[0] + (Buffer[1]>>1); 
		    predict := true;
		else						
			if(predict=true) then  // Predict 
				out_val := Buffer[countX-1] - ((Buffer[countX-2] + Buffer[countX])>>1);				
				predict := false;
			else              // Update
				out_val := Buffer[countX-1] + ((Buffer[countX-2] + Buffer[countX])>>2);				
				predict := true; 				
			end			
		end
		
		countX := countX + 1;
	end		
			
		
	doneCountX: action ==> coeff:[out_val_end] 
	guard countX = width	
	var int out_val_end	
	do					
		out_val_end := Buffer[countX-1] - Buffer[countX-2] ;// Symmetric extension	
		countX := 0;		
	end
	
		
	schedule fsm s0 :			
		s0 (getCoeffValue ) --> s1;
		s1 (wavelet_filter) --> s1;
		s1 (doneCountX    ) --> s0;
	end
	
	priority
		doneCountX > wavelet_filter;		
	end
	
end