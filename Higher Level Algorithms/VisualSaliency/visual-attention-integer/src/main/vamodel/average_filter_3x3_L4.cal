package main.vamodel;

import std.header.Parameter.*;
import std.util.Math.*;

actor average_filter_3x3_L4() int coefficient ==> int filt_coeff:
	int width = SUB4_WIDTH;
	int height = SUB4_HEIGHT;
	int coeffBuffer[height][width];	
	int countX := 0;
	int countY := 0;	
	
	getCoeffValue: action coefficient:[value] ==>  	
	do			
		coeffBuffer[countX][countY] := abs(value)*100;				
		countY := countY + 1;
		
		if(countY = width) then
			countX := countX + 1;
			countY := 0; 
		end									
	end
	
	doneCountX: action ==>
	guard countX = height
	do
		countX := 0;				
	end

	/* Filtering 3x3 */
	// Variables for filtering
	int tmp[height][width];  
	
	averageFilter3x3: action ==>
	do		
		foreach int x in 1 .. (height-2) do
			foreach int y in 1 .. (width-2) do
				foreach int i in -(FILTERING_LENGTH3x3-1)/2 .. (FILTERING_LENGTH3x3-1)/2 do
					foreach int j in -(FILTERING_LENGTH3x3-1)/2 .. (FILTERING_LENGTH3x3-1)/2 do
						tmp[x][y] := tmp[x][y] + coeffBuffer[x+i][y+j];						
					end
				end	
				// Scaling
				tmp[x][y] := tmp[x][y] / SCALING_3x3;				
			end			
		end 
		
		// Boundary condition (row)
		foreach int x in 1 .. (height-2) do
			foreach int i in -(FILTERING_LENGTH3x3-1)/2 .. (FILTERING_LENGTH3x3-1)/2 do
				foreach int j in 0 .. (FILTERING_LENGTH3x3-1)/2 do
						tmp[x][0] := tmp[x][0] + coeffBuffer[x+i][j];							
				end
				tmp[x][0] := tmp[x][0] / SCALING_3x3_BOUNDARY;
				
				foreach int j in -(FILTERING_LENGTH3x3-1)/2 .. 0 do
						tmp[x][width-1] := tmp[x][width-1] + coeffBuffer[x+i][width-1+j];						
				end				
				tmp[x][width-1] := tmp[x][width-1] / SCALING_3x3_BOUNDARY;				 				
			end
		end
		  
		// Boundary condition (column)
		foreach int y in 1 .. (width-2) do
			foreach int j in -(FILTERING_LENGTH3x3-1)/2 .. (FILTERING_LENGTH3x3-1)/2 do
				foreach int i in 0 .. (FILTERING_LENGTH3x3-1)/2 do
						tmp[0][y] := tmp[0][y] + coeffBuffer[i][y+j];							
				end
				tmp[0][y] := tmp[0][y] / SCALING_3x3_BOUNDARY;
				
				foreach int i in -(FILTERING_LENGTH3x3-1)/2 .. 0 do
						tmp[height-1][y] := tmp[height-1][y] + coeffBuffer[height-1+i][y+j];						
				end				
				tmp[height-1][y] := tmp[height-1][y] / SCALING_3x3_BOUNDARY;				
			end
		end
		
		// Four corner points
		tmp[0][0] := (coeffBuffer[0][0] + coeffBuffer[0][1] + coeffBuffer[1][0] + coeffBuffer[1][1])/SCALING_3x3_CORNER;
		tmp[0][width-1] := (coeffBuffer[0][width-1] + coeffBuffer[0][width-1-1] + coeffBuffer[1][width-1] + coeffBuffer[1][width-1-1])/SCALING_3x3_CORNER;
		tmp[height-1][0] := (coeffBuffer[height-1][0] + coeffBuffer[height-1][1] + coeffBuffer[height-1-1][0] + coeffBuffer[height-1-1][1])/SCALING_3x3_CORNER;
		tmp[height-1][width-1] := (coeffBuffer[height-1][width-1] + coeffBuffer[height-1][width-1-1] + coeffBuffer[height-1-1][width-1] + coeffBuffer[height-1-1][width-1-1])/SCALING_3x3_CORNER;									 	 
	end
	
	sendFilterValue: action ==> filt_coeff:[coeff_Val]
	var int coeff_Val
	do  
		coeff_Val := tmp[countX][countY];		
		countY := countY + 1;		
		if(countY = width) then
			countX := countX + 1;
			countY := 0; 
		end
	end
		
	schedule fsm s0 :			
		s0 (getCoeffValue ) --> s0;
		s0 (doneCountX ) --> s1;
		s1 (averageFilter3x3) --> s2;
		s2 (sendFilterValue) --> s2;
		s2 (doneCountX) --> s0;		
	end
	
	priority
		doneCountX > getCoeffValue;
		doneCountX > sendFilterValue;		
	end

end